<?phpclass Mylib {    public $CI;    function __construct() {        $this->CI = &get_instance();    }    function flashmsg() {        $CI = & get_instance();        $CI->load->library('Session');        $flashMsg = $CI->session->flashdata();        foreach ($flashMsg as $key => $value) {            $value = is_array($value) ? implode('<br/>', $value) : $value;            if (in_array($key, array("insert", "success"))) {                echo '<div class="alert alert-success">            <button class="close" data-dismiss="alert"></button>            ' . $value . '            </div>';            } else if (in_array($key, array("update", "info"))) {                echo '<div class="alert alert-info">            <button class="close" data-dismiss="alert"></button>            ' . $value . '            </div>';            } else if (in_array($key, array("delete", "error"))) {                echo '<div class="alert alert-error">            <button class="close" data-dismiss="alert"></button>            ' . $value . '            </div>';            }        }    }    function removeNull($data) {        if (is_array($data)) {            foreach ($data as $key => $value) {                if (empty($value)) {                    unset($data[$key]);                }            }        }        return $data;    }    function get_data() {        $data = NULL;        $get_data = $this->CI->input->get();        $post_data = $this->CI->input->post();        if (!empty($get_data)) {            $data = $get_data;        } else if (!empty($post_data)) {            $data = $post_data;        }        return $data;    }    ## Check Validation Errors    function validationErrors($Data) {        if (is_array($Data)) {            $Error = array();            foreach ($Data as $key => $value) {                $Error[$key] = form_error($key);            }            return $Error;        }        return array();    }    function GenerateNumber($length = 21) {        // start with a blank password        $password = "";        // define possible characters - any character in this string can be        // picked for use in the password, so if you want to put vowels back in        // or add special characters such as exclamation marks, this is where        // you should do it        $possible = "12346789abcdefghijkmnpqrstuvwxyz";        // we refer to the length of $possible a few times, so let's grab it now        $maxlength = strlen($possible);        // check for length overflow and truncate if necessary        if ($length > $maxlength) {            $length = $maxlength;        }        // set up a counter for how many characters are in the password so far        $i = 0;        // add random characters to $password until $length is reached        while ($i < $length) {            // pick a random character from the possible ones            $char = substr($possible, mt_rand(0, $maxlength - 1), 1);            // have we already used this character in $password?            if (!strstr($password, $char)) {                // no, so it's OK to add it onto the end of whatever we've already got...                $password .= $char;                // ... and increase the counter by one                $i++;            }        }        // done!        return $password;    }}