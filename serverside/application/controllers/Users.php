<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');class Users extends CI_Controller {    public $data = array();    public $record = array();    function __construct() {        parent::__construct();        ## Set Page Details        $this->data["page_title"] = "Users Management";        $this->data["page_keyword"] = PROJECTNAME;        $this->data["page_desc"] = PROJECTNAME;        $this->data["menu_active"] = "users";                $this->data["controller"] = "users";        $this->data["title"] = "User";        $this->data["formID"] = NULL;        $this->load->library(array('Session', 'form_validation', 'mylib'));        $this->load->model("auth_model", "auth", TRUE);        $this->load->model("users_model", "users", TRUE);        ## Set default Items        $this->auth->isLogin();    }    public function index() {        $AllUsers = $this->users->get_all();        $this->data["users"] = $AllUsers;        $this->load->view('admin/users/users_index_view', $this->data);    }    private function _field($record) {        /* --- Create Form Element  --- */        $this->data["form"]['ID'] = array(            'name' => 'UserID',            'id' => 'UserID',            'type' => 'hidden',            'value' => $this->data["formID"],        );        $this->data["form"]['label_Email'] = form_label('Email', 'Email', array("calss" => "form-label"));        $this->data["form"]['Email'] = array(            'name' => 'Email',            'id' => 'Email',            'type' => 'text',            'class' => 'form-control',            'Placeholder' => '',            'value' => $this->form_validation->set_value('Email', empty($record["Email"]) ? "" : $record["Email"]),        );        $this->data["form"]['label_Username'] = form_label('Username', 'Username', array("calss" => "form-label"));        $this->data["form"]['Username'] = array(            'name' => 'Username',            'id' => 'Username',            'type' => 'text',            'class' => 'form-control',            'Placeholder' => '',            'value' => $this->form_validation->set_value('Username', empty($record["Username"]) ? "" : $record["Username"]),        );        $this->data["form"]['label_Password'] = form_label('Password', 'Password', array("calss" => "form-label"));        $this->data["form"]['Password'] = array(            'name' => 'Password',            'id' => 'Password',            'type' => 'password',            'class' => 'form-control',            'Placeholder' => '',            'value' => $this->form_validation->set_value('Password'),        );        $this->data["form"]['label_Birthdate'] = form_label('Birthdate', 'Birthdate', array("calss" => "form-label"));        $this->data["form"]['Birthdate'] = array(            'name' => 'Birthdate',            'id' => 'Birthdate',            'type' => 'text',            'class' => 'form-control datepicker',            'Placeholder' => '',            'value' => $this->form_validation->set_value('Birthdate', empty($record["Birthdate"]) ? "" : $record["Birthdate"]),        );        ## Radio Button        $this->data["form"]['label_Gender'] = form_label('Gender', 'Gender', array("calss" => "form-label"));        $this->data["form"]['label_Gender_male'] = form_label('Male', 'Gender_male', array("calss" => "form-label"));        $this->data["form"]['Gender_male'] = array(            'name' => 'Gender',            'id' => 'Gender_male',            'type' => 'radio',            'class' => 'form-control',            'value' => 'Male',            'checked' => set_radio('Gender', 'Male', !empty($record["Gender"]) && $record["Gender"] == "Male" ? TRUE : FALSE),        );        $this->data["form"]['label_Gender_female'] = form_label('Female', 'Gender_female', array("calss" => "form-label"));        $this->data["form"]['Gender_female'] = array(            'name' => 'Gender',            'id' => 'Gender_female',            'type' => 'radio',            'class' => 'form-control',            'value' => 'Female',            'checked' => set_radio('Gender', 'Female', !empty($record["Gender"]) && $record["Gender"] == "Female" ? TRUE : FALSE),        );    }    private function _rule() {        ## Set Validation Rule        $this->form_validation->set_rules('Username', 'Username', 'required|is_unique[users.Username.UserID.' . $this->data["formID"] . ']');        $this->form_validation->set_rules('Email', 'Email', 'required|is_unique[users.Email.UserID.' . $this->data["formID"] . ']');        $this->form_validation->set_rules('Password', 'Password', empty($this->data["formID"]) ? "required|min_length[6]" : "min_length[6]");        $this->form_validation->set_rules('Birthdate', 'Birthdate', 'required');        $this->form_validation->set_rules('Gender', 'Gender', 'required');        ## Set Custom Message        $this->form_validation->set_message('is_unique', '%s already exists.');    }    public function form($ID = NULL) {                $this->data["formID"] = $ID;        ## Check Validation        $this->_rule();        if ($this->form_validation->run() == true) {            $Data = $this->mylib->get_data();            ## encrypt password            if (empty($Data["Password"])) {                unset($Data["Password"]);            } else {                $Data["Password"] = sha1($Data["Password"]);            }            ## Insert Form Data            if (empty($Data["UserID"])) {                if ($this->users->insert($Data)) {                    $this->session->set_flashdata('insert', "User inserted Successfully.");                    redirect("users", 'refresh');                }            ## Update Form Data                } else {                if ($this->users->update($ID, $Data)) {                    $this->session->set_flashdata('update', "User updated Successfully.");                    redirect("users", 'refresh');                }            }            $this->session->set_flashdata('error', "Internal error occure.");            redirect("users", 'refresh');        } else {            if (!empty($ID)) {                $this->record = $this->users->get($ID);            }            ## Set Form Element            $this->_field($this->record);            $this->load->view('admin/users/users_add_view', $this->data);        }    }    public function view($ID=NULL){        if(!empty($ID)){            $this->data["record"]=  $this->users->get($ID);            $this->load->view('admin/users/users_details_view', $this->data);                    }else{        redirect($this->data["controller"]);        }    }    public function delete($ID = NULL) {        if (!empty($ID)) {            if ($this->users->delete($ID)) {                $this->session->set_flashdata('delete', "User deleted successfully.");                redirect("users", 'refresh');            }        }        $this->session->set_flashdata('error', "Internal error occure.");        redirect("users", 'refresh');    }}